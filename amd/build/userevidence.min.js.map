{"version":3,"file":"userevidence.min.js","sources":["../src/userevidence.js"],"sourcesContent":["/**\n * JS for handling the upload users modal in a form.\n *\n * @module local_taskflow/userevidence\n * @copyright 2025\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Initialize the upload users modal.\n *\n * @param {number} userid - The user ID to pass to the modal form.\n */\nexport const init = (userid) => {\n    initUploadModal(userid);\n    initDeleteButtons(userid);\n};\n\nconst initUploadModal = (userid) => {\n    const triggers = document.querySelectorAll('[data-action=\"openuserevidencemodal\"]');\n\n    if (!triggers.length) {\n        return;\n    }\n\n    triggers.forEach(function(trigger) {\n        trigger.addEventListener('click', async function(e) {\n            e.preventDefault();\n\n            const title = await getString('uploadevidence', 'local_taskflow');\n\n            const args = {};\n            Object.entries(this.dataset).forEach(([key, value]) => {\n                args[key] = value;\n            });\n\n            // Always ensure userid is included\n            args.userid = userid;\n\n            const modal = new ModalForm({\n                formClass: 'local_taskflow\\\\form\\\\userevidence',\n                args: args,\n                modalConfig: {\n                    title: title,\n                }\n            });\n\n            modal.addEventListener(modal.events.FORM_SUBMITTED, () => {\n                Notification.addNotification({\n                    message: 'Your upload was successful!',\n                    type: 'success',\n                    closeButton: true,\n                });\n\n                setTimeout(() => {\n                    window.location.reload();\n                }, 2000);\n            });\n\n            modal.show();\n        });\n    });\n};\n\nconst initDeleteButtons = (userid) => {\n    const triggers = document.querySelectorAll('[data-action=\"deleteuserevidence\"]');\n\n    if (!triggers.length) {\n        return;\n    }\n\n    triggers.forEach(function(trigger) {\n        trigger.addEventListener('click', async function(e) {\n            e.preventDefault();\n\n            const title = await getString('uploadevidence', 'local_taskflow');\n\n            const args = {};\n            Object.entries(this.dataset).forEach(([key, value]) => {\n                args[key] = value;\n            });\n\n            // Always ensure userid is included\n            args.userid = userid;\n\n            const modal = new ModalForm({\n                formClass: 'local_taskflow\\\\form\\\\delete_userevidence',\n                args: args,\n                modalConfig: {\n                    title: title,\n                }\n            });\n\n            modal.addEventListener(modal.events.FORM_SUBMITTED, () => {\n                Notification.addNotification({\n                    message: 'Your upload was successful!',\n                    type: 'success',\n                    closeButton: true,\n                });\n\n                setTimeout(() => {\n                    window.location.reload();\n                }, 2000);\n            });\n\n            modal.show();\n        });\n    });\n};\n"],"names":["userid","initUploadModal","initDeleteButtons","triggers","document","querySelectorAll","length","forEach","trigger","addEventListener","async","e","preventDefault","title","args","Object","entries","this","dataset","_ref","key","value","modal","ModalForm","formClass","modalConfig","events","FORM_SUBMITTED","addNotification","message","type","closeButton","setTimeout","window","location","reload","show","_ref2"],"mappings":";;;;;;;kMAiBqBA,SACjBC,gBAAgBD,QAChBE,kBAAkBF,eAGhBC,gBAAmBD,eACfG,SAAWC,SAASC,iBAAiB,yCAEtCF,SAASG,QAIdH,SAASI,SAAQ,SAASC,SACtBA,QAAQC,iBAAiB,SAASC,eAAeC,GAC7CA,EAAEC,uBAEIC,YAAc,mBAAU,iBAAkB,kBAE1CC,KAAO,GACbC,OAAOC,QAAQC,KAAKC,SAASX,SAAQY,WAAEC,IAAKC,YACxCP,KAAKM,KAAOC,SAIhBP,KAAKd,OAASA,aAERsB,MAAQ,IAAIC,mBAAU,CACxBC,UAAW,qCACXV,KAAMA,KACNW,YAAa,CACTZ,MAAOA,SAIfS,MAAMb,iBAAiBa,MAAMI,OAAOC,gBAAgB,2BACnCC,gBAAgB,CACzBC,QAAS,8BACTC,KAAM,UACNC,aAAa,IAGjBC,YAAW,KACPC,OAAOC,SAASC,WACjB,QAGPb,MAAMc,cAKZlC,kBAAqBF,eACjBG,SAAWC,SAASC,iBAAiB,sCAEtCF,SAASG,QAIdH,SAASI,SAAQ,SAASC,SACtBA,QAAQC,iBAAiB,SAASC,eAAeC,GAC7CA,EAAEC,uBAEIC,YAAc,mBAAU,iBAAkB,kBAE1CC,KAAO,GACbC,OAAOC,QAAQC,KAAKC,SAASX,SAAQ8B,YAAEjB,IAAKC,aACxCP,KAAKM,KAAOC,SAIhBP,KAAKd,OAASA,aAERsB,MAAQ,IAAIC,mBAAU,CACxBC,UAAW,4CACXV,KAAMA,KACNW,YAAa,CACTZ,MAAOA,SAIfS,MAAMb,iBAAiBa,MAAMI,OAAOC,gBAAgB,2BACnCC,gBAAgB,CACzBC,QAAS,8BACTC,KAAM,UACNC,aAAa,IAGjBC,YAAW,KACPC,OAAOC,SAASC,WACjB,QAGPb,MAAMc"}