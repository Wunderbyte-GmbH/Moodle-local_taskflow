{"version":3,"file":"dashboard.min.js","sources":["../src/dashboard.js"],"sourcesContent":["/**\n * JS for handling AJAX-based form step loading.\n *\n * @module local_taskflow/dashboard\n * @copyright 2025\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Ajax from 'core/ajax';\nimport * as notification from 'core/notification';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport DynamicForm from 'core_form/dynamicform';\n\nconst SELECTORS = {\n    DASHBOARDWRAPPER: '[data-region=\"dashboard-wrapper\"]',\n    USERSELECTORFORM: '[data-region=\"tf-selectuserformcontainer\"]',\n    LISTBOX: '.form-autocomplete-selection',\n    CLOSEBTN: '.btn-close-tab',\n};\n\nvar container;\nvar uniqueid;\nvar dynamicForm;\n\n/**\n *\n * @param {*} id\n */\nexport const init = (id) => {\n    // eslint-disable-next-line no-console\n    console.log('Initializing dashboard with uniqueid:', uniqueid);\n    const body = document.body;\n    uniqueid = id;\n    container = document.querySelector(SELECTORS.DASHBOARDWRAPPER + '[data-uniqueid=\"' + uniqueid + '\"]');\n    attachCloseListenerOnce();\n    if (!body.classList.contains('dashboard-init')) {\n        //loadDashboard(uniqueid)\n               initUserSelectorForm();\n            return;\n\n    }\n    body.classList.add('dashboard-init');\n};\n\n/**\n * Init the user selector form.\n *\n */\nfunction initUserSelectorForm() {\n\n    const element = document.querySelector(SELECTORS.USERSELECTORFORM);\n    if (!element || element.dataset.init) {\n        // eslint-disable-next-line no-console\n        console.warn('No user selector form found for uniqueid:', uniqueid);\n        return;\n    }\n    // Initialize the form.\n    dynamicForm = new DynamicForm(\n        element,\n        'local_taskflow\\\\form\\\\dynamic_select_users'\n    );\n\n    dynamicForm.load()\n        // Wait until the autocomplete list-box exists.\n        .then(() => waitForElement(container, SELECTORS.LISTBOX))\n        .then(listBox => {\n            reactToChange(listBox);\n            const observer = new MutationObserver(() =>\n                reactToChange(listBox, {dynamicForm, uniqueid})\n            );\n            observer.observe(listBox, {childList: true, subtree: true});\n\n            dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, (e) => {\n                // Prevent default form submission.\n                e.preventDefault();\n                e.stopPropagation();\n                loadDashboard(uniqueid)\n                .then((status) => {\n                    if (status === 'redirected') {\n                        return;\n                    }\n                    initUserSelectorForm();\n                    return;\n                })\n                .catch((err) => {\n                    // eslint-disable-next-line no-console\n                    console.error('Dashboard failed:', err);\n                });\n             });\n        })\n        .catch(notification.exception);\n\n    element.dataset.init = '1';\n\n}\n\n/**\n * Bind exactly once to the <ul class=\"nav nav-tabs\"> inside the wrapper.\n * Everything else happens only if the click was on .btn-close-tab.\n */\nfunction attachCloseListenerOnce() {\n    const wrapper = document.querySelector(\n        `${SELECTORS.DASHBOARDWRAPPER}[data-uniqueid=\"${uniqueid}\"]`\n    );\n    const navTabs = wrapper?.querySelector('.nav.nav-tabs');\n    if (!navTabs || navTabs.dataset.closeInit) {\n        return;\n    }\n\n    navTabs.addEventListener('click', (e) => {\n        const btn = e.target.closest('.btn-close-tab');\n        if (!btn) {\n            return;\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        const userid = Number(btn.dataset.userid);\n        if (!userid) {\n            return;\n        }\n\n        // 1. Purge cache via AJAX.\n        Ajax.call([{\n            methodname: 'local_taskflow_clear_dashboard_cache',\n            args: {userid},\n        }])[0]\n        .done(() => {\n            // 2. Remove tab + pane.\n            const tab = document.querySelector(btn.dataset.tab);\n            const pane = document.querySelector(btn.dataset.pane);\n            if (pane) {\n                pane.remove();\n            }\n            if (tab) {\n                const li = tab.parentElement;\n                const wasActive = tab.classList.contains('active');\n                li.remove();\n\n                if (wasActive) {\n                    const first = wrapper.querySelector('.nav-link');\n                    if (first) {\n                        first.click();\n                    }\n                }\n            }\n        })\n        .fail(notification.exception);\n    });\n\n    navTabs.dataset.closeInit = '1';\n}\n\n/**\n * Wait for an element to be added to the DOM.\n * @param {*} root\n * @param {*} selector\n * @param {*} timeout\n * @returns\n */\nfunction waitForElement(root, selector, timeout = 1000) {\n    return new Promise((resolve, reject) => {\n        const el = root.querySelector(selector);\n        if (el) {\n            return resolve(el);\n        }\n\n        const obs = new MutationObserver(() => {\n            const candidate = root.querySelector(selector);\n            if (candidate) {\n                obs.disconnect();\n                resolve(candidate);\n            }\n        });\n\n        obs.observe(root, {childList: true, subtree: true});\n\n        // Safety-net timeout\n        setTimeout(() => {\n            obs.disconnect();\n            reject(new Error(`Element ${selector} not found within ${timeout} ms`));\n        }, timeout);\n    });\n}\n\n/**\n * Check if a selection exists in the listbox.\n * @returns {boolean}\n */\nfunction selectionExists() {\n    const selBox = container.querySelector('.form-autocomplete-selection');\n    // A real selection produces a <span … class=\"badge …\"> inside the listbox\n    return !!selBox && selBox.querySelector('.badge');\n}\n\n/**\n * React to changes in the listbox selection.\n * @param {*} listBox\n */\nfunction reactToChange(listBox) {\n    if (selectionExists(listBox)) {\n        if (dynamicForm) {\n            dynamicForm.submitFormAjax()\n                .catch(notification.exception);\n        }\n    }\n}\n\n\n/**\n * Load a step of the form via AJAX.\n *\n * @param {mixed} uniqueid\n *\n * @return void *\n */\nfunction loadDashboard(uniqueid) {\n  const multiformcontainer = document.querySelector(\n    SELECTORS.DASHBOARDWRAPPER + '[data-uniqueid=\"' + uniqueid + '\"]'\n  );\n  if (!multiformcontainer) {\n    return Promise.resolve(false);\n  }\n\n  return new Promise((resolve, reject) => {\n    Ajax.call([\n      {\n        methodname: 'local_taskflow_load_dashboard',\n        args: {},\n        done: (response) => {\n            if (response.returnurl?.length) {\n                window.location.href = response.returnurl;\n                resolve('redirected');\n                return;\n            }\n\n            Templates.renderForPromise(\n            response.template,\n            JSON.parse(response.data)\n            )\n            .then(({ html, js }) => {\n                html += response.js;\n                Templates.replaceNode(\n                    `${SELECTORS.DASHBOARDWRAPPER}[data-uniqueid=\"${uniqueid}\"]`,\n                    html,\n                    js\n              );\n                document.body.classList.add('dashboard-init');\n                resolve(true);\n                return true;\n            })\n            .catch((err) => {\n                // eslint-disable-next-line no-console\n                console.error(err);\n                reject(err);\n            });\n        },\n\n        fail: (xhrError) => {\n          notification.exception(xhrError);\n          reject(xhrError);\n        },\n      },\n    ]);\n  });\n}\n"],"names":["SELECTORS","container","uniqueid","dynamicForm","initUserSelectorForm","element","document","querySelector","dataset","init","DynamicForm","load","then","root","selector","timeout","Promise","resolve","reject","el","obs","MutationObserver","candidate","disconnect","observe","childList","subtree","setTimeout","Error","waitForElement","listBox","reactToChange","addEventListener","events","FORM_SUBMITTED","e","preventDefault","stopPropagation","call","methodname","args","done","response","returnurl","_response$returnurl","length","window","location","href","renderForPromise","template","JSON","parse","data","_ref","html","js","replaceNode","body","classList","add","catch","err","console","error","fail","xhrError","notification","exception","loadDashboard","status","warn","selBox","selectionExists","submitFormAjax","id","log","wrapper","navTabs","closeInit","btn","target","closest","userid","Number","tab","pane","remove","li","parentElement","wasActive","contains","first","click","attachCloseListenerOnce"],"mappings":"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"}